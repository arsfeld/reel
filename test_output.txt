Reel Development Environment
==================================

Welcome to the development environment!
Run 'help' to see all available commands.

   Compiling reel v0.5.0 (/home/arosenfeld/Code/gnome-reel)
error[E0407]: method `get_playback_progress` is not a member of trait `MediaBackend`
   --> src/services/commands/sync_commands.rs:184:9
    |
184 | /         async fn get_playback_progress(&self, _item_id: &str) -> Result<Option<Duration>> {
185 | |             Ok(None)
186 | |         }
    | |_________^ not a member of trait `MediaBackend`

error[E0407]: method `update_playback_progress` is not a member of trait `MediaBackend`
   --> src/services/commands/sync_commands.rs:188:9
    |
188 | /         async fn update_playback_progress(
189 | |             &self,
190 | |             _item_id: &str,
191 | |             _position: Duration,
192 | |         ) -> Result<()> {
193 | |             Ok(())
194 | |         }
    | |_________^ not a member of trait `MediaBackend`

error[E0407]: method `check_connection` is not a member of trait `MediaBackend`
   --> src/services/commands/sync_commands.rs:200:9
    |
200 | /         async fn check_connection(&self) -> Result<bool> {
201 | |             Ok(true)
202 | |         }
    | |_________^ not a member of trait `MediaBackend`

error[E0407]: method `backend_type` is not a member of trait `MediaBackend`
   --> src/services/commands/sync_commands.rs:204:9
    |
204 | /         fn backend_type(&self) -> crate::backends::BackendType {
205 | |             crate::backends::BackendType::Plex
206 | |         }
    | |_________^ not a member of trait `MediaBackend`

error[E0412]: cannot find type `Credentials` in module `crate::backends`
   --> src/services/commands/sync_commands.rs:100:44
    |
100 |             _credentials: crate::backends::Credentials,
    |                                            ^^^^^^^^^^^ not found in `crate::backends`
    |
help: consider importing this enum
    |
43  +     use crate::models::Credentials;
    |
help: if you import `Credentials`, refer to it directly
    |
100 -             _credentials: crate::backends::Credentials,
100 +             _credentials: Credentials,
    |

error[E0412]: cannot find type `BackendType` in module `crate::backends`
   --> src/services/commands/sync_commands.rs:204:52
    |
204 |         fn backend_type(&self) -> crate::backends::BackendType {
    |                                                    ^^^^^^^^^^^ not found in `crate::backends`
    |
help: consider importing one of these enums
    |
43  +     use crate::backends::traits::BackendType;
    |
43  +     use crate::ui::dialogs::auth_dialog::BackendType;
    |
help: if you import `BackendType`, refer to it directly
    |
204 -         fn backend_type(&self) -> crate::backends::BackendType {
204 +         fn backend_type(&self) -> BackendType {
    |

error[E0433]: failed to resolve: could not find `BackendType` in `backends`
   --> src/services/commands/sync_commands.rs:205:30
    |
205 |             crate::backends::BackendType::Plex
    |                              ^^^^^^^^^^^ could not find `BackendType` in `backends`
    |
help: consider importing one of these enums
    |
43  +     use crate::backends::traits::BackendType;
    |
43  +     use crate::ui::dialogs::auth_dialog::BackendType;
    |
help: if you import `BackendType`, refer to it directly
    |
205 -             crate::backends::BackendType::Plex
205 +             BackendType::Plex
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/commands/sync_commands.rs:213:25
    |
213 |         let source_id = SourceId(1);
    |                         ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
43  +     use crate::db::entities::media_items::Column::SourceId;
    |
43  +     use crate::services::commands::sync_commands::tests::libraries::Column::SourceId;
    |

error[E0425]: cannot find value `db` in this scope
   --> src/services/commands/sync_commands.rs:216:17
    |
216 |             db: db.clone(),
    |                 ^^ not found in this scope

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/commands/sync_commands.rs:228:25
    |
228 |         let source_id = SourceId(1);
    |                         ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
43  +     use crate::db::entities::media_items::Column::SourceId;
    |
43  +     use crate::services::commands::sync_commands::tests::libraries::Column::SourceId;
    |

error[E0425]: cannot find value `db` in this scope
   --> src/services/commands/sync_commands.rs:237:17
    |
237 |             db: db.clone(),
    |                 ^^ not found in this scope

error[E0574]: expected struct, variant or union type, found enum `MediaItem`
   --> src/services/core/media.rs:653:9
    |
653 |         MediaItem {
    |         ^^^^^^^^^
    |
   ::: src/models/identifiers.rs:9:9
    |
9   |         pub struct $name(String);
    |         ------------------------- similarly named struct `MediaItemId` defined here
    |
help: a struct with a similar name exists
    |
653 |         MediaItemId {
    |                  ++
help: consider importing one of these items instead
    |
585 +     use crate::db::entities::MediaItem;
    |
585 +     use crate::db::entities::offline_content::Relation::MediaItem;
    |
585 +     use crate::db::entities::playback_progress::Relation::MediaItem;
    |
585 +     use crate::services::cache_keys::CacheKey::MediaItem;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:655:24
    |
655 |             source_id: SourceId("test-source".to_string()),
    |                        ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
585 +     use crate::db::entities::libraries::Column::SourceId;
    |
585 +     use crate::db::entities::media_items::Column::SourceId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:656:25
    |
656 |             library_id: LibraryId("test-lib".to_string()),
    |                         ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
72  | impl_id_type!(LibraryId);
    | ------------------------ in this macro invocation
note: unit variant `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::LibraryId` exists but is inaccessible
   --> src/db/migrations/m20250101_000001_create_initial_schema.rs:375:5
    |
375 |     LibraryId,
    |     ^^^^^^^^^ not accessible
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing this unit variant instead
    |
585 +     use crate::db::entities::media_items::Column::LibraryId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:785:25
    |
785 |         let source_id = SourceId("test-source".to_string());
    |                         ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
585 +     use crate::db::entities::libraries::Column::SourceId;
    |
585 +     use crate::db::entities::media_items::Column::SourceId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:790:27
    |
790 |         let source_id_2 = SourceId("test-source-2".to_string());
    |                           ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
585 +     use crate::db::entities::libraries::Column::SourceId;
    |
585 +     use crate::db::entities::media_items::Column::SourceId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:820:22
    |
820 |         let lib_id = LibraryId("lib-1".to_string());
    |                      ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
72  | impl_id_type!(LibraryId);
    | ------------------------ in this macro invocation
note: unit variant `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::LibraryId` exists but is inaccessible
   --> src/db/migrations/m20250101_000001_create_initial_schema.rs:375:5
    |
375 |     LibraryId,
    |     ^^^^^^^^^ not accessible
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing this unit variant instead
    |
585 +     use crate::db::entities::media_items::Column::LibraryId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:828:22
    |
828 |         let lib_id = LibraryId("non-existent".to_string());
    |                      ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
72  | impl_id_type!(LibraryId);
    | ------------------------ in this macro invocation
note: unit variant `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::LibraryId` exists but is inaccessible
   --> src/db/migrations/m20250101_000001_create_initial_schema.rs:375:5
    |
375 |     LibraryId,
    |     ^^^^^^^^^ not accessible
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: a local variable with a similar name exists
    |
828 -         let lib_id = LibraryId("non-existent".to_string());
828 +         let lib_id = library("non-existent".to_string());
    |
help: consider importing this unit variant instead
    |
585 +     use crate::db::entities::media_items::Column::LibraryId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:842:25
    |
842 |         let source_id = SourceId("test-source".to_string());
    |                         ^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
69  | impl_id_type!(SourceId);
    | ----------------------- in this macro invocation
note: these unit variants exist but are inaccessible
   --> src/db/entities/sync_status.rs:4:35
    |
4   | #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^^^^^^^ `crate::db::repository::sync_repository::sync_repository_tests::tests::sync_status::Column::SourceId`: not accessible
    |
   ::: src/db/migrations/m20250101_000001_create_initial_schema.rs:362:5
    |
362 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::Libraries::SourceId`: not accessible
...
376 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::SourceId`: not accessible
...
410 |     SourceId,
    |     ^^^^^^^^ `crate::db::migrations::m20250101_000001_create_initial_schema::SyncStatus::SourceId`: not accessible
    = note: this error originates in the macro `impl_id_type` which comes from the expansion of the derive macro `DeriveEntityModel` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing one of these unit variants instead
    |
585 +     use crate::db::entities::libraries::Column::SourceId;
    |
585 +     use crate::db::entities::media_items::Column::SourceId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:847:22
    |
847 |         let lib_id = LibraryId("new-lib".to_string());
    |                      ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
72  | impl_id_type!(LibraryId);
    | ------------------------ in this macro invocation
note: unit variant `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::LibraryId` exists but is inaccessible
   --> src/db/migrations/m20250101_000001_create_initial_schema.rs:375:5
    |
375 |     LibraryId,
    |     ^^^^^^^^^ not accessible
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: a local variable with a similar name exists
    |
847 -         let lib_id = LibraryId("new-lib".to_string());
847 +         let lib_id = library("new-lib".to_string());
    |
help: consider importing this unit variant instead
    |
585 +     use crate::db::entities::media_items::Column::LibraryId;
    |

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:964:26
    |
964 |         let library_id = LibraryId("test-lib".to_string());
    |                          ^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
72  | impl_id_type!(LibraryId);
    | ------------------------ in this macro invocation
note: unit variant `crate::db::migrations::m20250101_000001_create_initial_schema::MediaItems::LibraryId` exists but is inaccessible
   --> src/db/migrations/m20250101_000001_create_initial_schema.rs:375:5
    |
375 |     LibraryId,
    |     ^^^^^^^^^ not accessible
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++
help: consider importing this unit variant instead
    |
585 +     use crate::db::entities::media_items::Column::LibraryId;
    |

warning: unused imports: `MediaItem` and `media_items`
   --> src/db/repository/media_repository.rs:687:31
    |
687 |     use crate::db::entities::{MediaItem, MediaItemModel, media_items};
    |                               ^^^^^^^^^                  ^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused import: `super::*`
   --> src/services/commands/auth_commands.rs:154:9
    |
154 |     use super::*;
    |         ^^^^^^^^

warning: unused import: `crate::backends::traits::BackendType`
   --> src/services/commands/auth_commands.rs:155:9
    |
155 |     use crate::backends::traits::BackendType;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::db::entities::sources`
   --> src/services/commands/auth_commands.rs:156:9
    |
156 |     use crate::db::entities::sources;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Episode`, `LibraryType`, `Library`, `Movie`, and `Show`
   --> src/services/commands/auth_commands.rs:157:25
    |
157 |     use crate::models::{Episode, Library, LibraryType, Movie, Show};
    |                         ^^^^^^^  ^^^^^^^  ^^^^^^^^^^^  ^^^^^  ^^^^

warning: unused import: `chrono::Utc`
   --> src/services/commands/auth_commands.rs:158:9
    |
158 |     use chrono::Utc;
    |         ^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
   --> src/services/commands/auth_commands.rs:160:9
    |
160 |     use std::sync::Arc;
    |         ^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> src/services/commands/auth_commands.rs:161:9
    |
161 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::*`
   --> src/services/commands/media_commands.rs:294:9
    |
294 |     use super::*;
    |         ^^^^^^^^

warning: unused imports: `libraries`, `media_items`, and `playback_progress`
   --> src/services/commands/media_commands.rs:295:31
    |
295 |     use crate::db::entities::{libraries, media_items, playback_progress};
    |                               ^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused imports: `LibraryType` and `Movie`
   --> src/services/commands/media_commands.rs:296:25
    |
296 |     use crate::models::{LibraryType, Movie};
    |                         ^^^^^^^^^^^  ^^^^^

warning: unused import: `chrono::Utc`
   --> src/services/commands/media_commands.rs:297:9
    |
297 |     use chrono::Utc;
    |         ^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
   --> src/services/commands/media_commands.rs:299:9
    |
299 |     use std::sync::Arc;
    |         ^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> src/services/commands/media_commands.rs:300:9
    |
300 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::db::connection::DatabaseConnection`
  --> src/services/commands/sync_commands.rs:44:9
   |
44 |     use crate::db::connection::DatabaseConnection;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `libraries` and `sources`
  --> src/services/commands/sync_commands.rs:45:31
   |
45 |     use crate::db::entities::{libraries, sources};
   |                               ^^^^^^^^^  ^^^^^^^

warning: unused import: `crate::services::core::sync::SyncResult`
  --> src/services/commands/sync_commands.rs:47:9
   |
47 |     use crate::services::core::sync::SyncResult;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> src/services/commands/sync_commands.rs:51:9
   |
51 |     use std::sync::Arc;
   |         ^^^^^^^^^^^^^^

warning: unused import: `debug`
 --> src/services/core/media.rs:2:15
  |
2 | use tracing::{debug, info, warn};
  |               ^^^^^

warning: unused import: `super::*`
   --> src/services/core/media.rs:585:9
    |
585 |     use super::*;
    |         ^^^^^^^^

warning: unused import: `ShowId`
   --> src/services/core/media.rs:590:77
    |
590 |         Library, LibraryId, LibraryType, MediaItem, MediaItemId, MediaType, ShowId, SourceId,
    |                                                                             ^^^^^^

warning: unused import: `SyncService`
  --> src/services/core/mod.rs:16:30
   |
16 | pub use sync::{SyncProgress, SyncService, SyncStatus};
   |                              ^^^^^^^^^^^

warning: unused import: `crate::db::repository::source_repository::SourceRepositoryImpl`
 --> src/workers/connection_monitor_tests.rs:4:9
  |
4 |     use crate::db::repository::source_repository::SourceRepositoryImpl;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ConnectionMonitorInput`
 --> src/workers/connection_monitor_tests.rs:8:28
  |
8 |         ConnectionMonitor, ConnectionMonitorInput, ConnectionMonitorOutput,
  |                            ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `relm4::Worker`
  --> src/workers/connection_monitor_tests.rs:10:9
   |
10 |     use relm4::Worker;
   |         ^^^^^^^^^^^^^

error[E0277]: `sync_commands::tests::TestBackend` doesn't implement `std::fmt::Debug`
  --> src/services/commands/sync_commands.rs:97:27
   |
97 |     impl MediaBackend for TestBackend {
   |                           ^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `sync_commands::tests::TestBackend`
   |
   = note: add `#[derive(Debug)]` to `sync_commands::tests::TestBackend` or manually `impl std::fmt::Debug for sync_commands::tests::TestBackend`
note: required by a bound in `backends::traits::MediaBackend`
  --> src/backends/traits.rs:12:39
   |
12 | pub trait MediaBackend: Send + Sync + std::fmt::Debug {
   |                                       ^^^^^^^^^^^^^^^ required by this bound in `MediaBackend`
help: consider annotating `sync_commands::tests::TestBackend` with `#[derive(Debug)]`
   |
94 +     #[derive(Debug)]
95 |     struct TestBackend;
   |

error[E0053]: method `get_movies` has an incompatible type for trait
   --> src/services/commands/sync_commands.rs:126:48
    |
126 |         async fn get_movies(&self, library_id: &str) -> Result<Vec<Movie>> {
    |                                                ^^^^ expected `identifiers::LibraryId`, found `str`
    |
note: type in trait
   --> src/backends/traits.rs:26:44
    |
26  |     async fn get_movies(&self, library_id: &LibraryId) -> Result<Vec<Movie>>;
    |                                            ^^^^^^^^^^
    = note: expected signature `fn(&'life0 sync_commands::tests::TestBackend, &'life1 identifiers::LibraryId) -> std::pin::Pin<_>`
               found signature `fn(&'life0 sync_commands::tests::TestBackend, &'life1 str) -> std::pin::Pin<_>`
help: change the parameter type to match the trait
    |
126 -         async fn get_movies(&self, library_id: &str) -> Result<Vec<Movie>> {
126 +         async fn get_movies(&self, library_id: &'life1 identifiers::LibraryId) -> Result<Vec<Movie>> {
    |

error[E0053]: method `get_shows` has an incompatible type for trait
   --> src/services/commands/sync_commands.rs:155:47
    |
155 |         async fn get_shows(&self, library_id: &str) -> Result<Vec<Show>> {
    |                                               ^^^^ expected `identifiers::LibraryId`, found `str`
    |
note: type in trait
   --> src/backends/traits.rs:28:43
    |
28  |     async fn get_shows(&self, library_id: &LibraryId) -> Result<Vec<Show>>;
    |                                           ^^^^^^^^^^
    = note: expected signature `fn(&'life0 sync_commands::tests::TestBackend, &'life1 identifiers::LibraryId) -> std::pin::Pin<_>`
               found signature `fn(&'life0 sync_commands::tests::TestBackend, &'life1 str) -> std::pin::Pin<_>`
help: change the parameter type to match the trait
    |
155 -         async fn get_shows(&self, library_id: &str) -> Result<Vec<Show>> {
155 +         async fn get_shows(&self, library_id: &'life1 identifiers::LibraryId) -> Result<Vec<Show>> {
    |

error[E0050]: method `get_episodes` has 2 parameters but the declaration in trait `backends::traits::MediaBackend::get_episodes` has 3
   --> src/services/commands/sync_commands.rs:180:31
    |
180 |         async fn get_episodes(&self, _show_id: &str) -> Result<Vec<crate::models::Episode>> {
    |                               ^^^^^^^^^^^^^^^^^^^^^ expected 3 parameters, found 2
    |
   ::: src/backends/traits.rs:32:27
    |
32  |     async fn get_episodes(&self, show_id: &ShowId, season: u32) -> Result<Vec<Episode>>;
    |                           ------------------------------------ trait requires 3 parameters

error[E0050]: method `get_stream_url` has 3 parameters but the declaration in trait `backends::traits::MediaBackend::get_stream_url` has 2
   --> src/services/commands/sync_commands.rs:196:33
    |
196 |         async fn get_stream_url(&self, item_id: &str, _quality: Option<String>) -> Result<String> {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 parameters, found 3
    |
   ::: src/backends/traits.rs:34:29
    |
34  |     async fn get_stream_url(&self, media_id: &MediaItemId) -> Result<StreamInfo>;
    |                             ----------------------------- trait requires 2 parameters

error[E0046]: not all trait items implemented, missing: `initialize`, `as_any`, `get_seasons`, `update_progress`, `get_backend_id`
  --> src/services/commands/sync_commands.rs:97:5
   |
97 |       impl MediaBackend for TestBackend {
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `initialize`, `as_any`, `get_seasons`, `update_progress`, `get_backend_id` in implementation
   |
  ::: src/backends/traits.rs:15:5
   |
15 |       async fn initialize(&self) -> Result<Option<User>>;
   |       --------------------------------------------------- `initialize` from trait
...
20 |       fn as_any(&self) -> &dyn std::any::Any;
   |       --------------------------------------- `as_any` from trait
...
30 |       async fn get_seasons(&self, show_id: &ShowId) -> Result<Vec<Season>>;
   |       --------------------------------------------------------------------- `get_seasons` from trait
...
36 | /     async fn update_progress(
37 | |         &self,
38 | |         media_id: &MediaItemId,
39 | |         position: Duration,
40 | |         duration: Duration,
41 | |     ) -> Result<()>;
   | |____________________- `update_progress` from trait
...
62 |       async fn get_backend_id(&self) -> BackendId;
   |       -------------------------------------------- `get_backend_id` from trait

warning: unused variable: `index`
   --> src/services/core/media.rs:347:14
    |
347 |         for (index, item) in items.iter().enumerate() {
    |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`
    |
    = note: `#[warn(unused_variables)]` on by default

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:773:25
    |
773 |             sort_title: title.to_lowercase(),
    |                         ^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
773 |             sort_title: Some(title.to_lowercase()),
    |                         +++++                    +

error[E0560]: struct `media_items::Model` has no field named `original_title`
   --> src/db/repository/media_repository.rs:774:13
    |
774 |             original_title: Some(title.to_string()),
    |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
   --> src/db/repository/media_repository.rs:775:13
    |
775 |             summary: Some(format!("Summary for {}", title)),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
   --> src/db/repository/media_repository.rs:776:13
    |
776 |             tagline: Some(format!("Tagline for {}", title)),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
   --> src/db/repository/media_repository.rs:778:13
    |
778 |             duration: Some(7200000), // 2 hours in milliseconds
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:780:26
    |
780 |             genres: Some(vec!["Action".to_string(), "Adventure".to_string()]),
    |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
    |                     |
    |                     arguments to this enum variant are incorrect
    |
    = note: expected enum `JsonValue`
             found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
   --> src/db/repository/media_repository.rs:780:21
    |
780 |             genres: Some(vec!["Action".to_string(), "Adventure".to_string()]),
    |                     ^^^^^---------------------------------------------------^
    |                          |
    |                          this argument influences the type of `Some`
note: tuple variant defined here
   --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
    |
780 |             genres: Some(vec!["Action".to_string(), "Adventure".to_string()].into()),
    |                                                                             +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
   --> src/db/repository/media_repository.rs:783:13
    |
783 |             media_url: Some(format!("https://example.com/{}.mp4", id)),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
   --> src/db/repository/media_repository.rs:784:13
    |
784 |             file_path: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
   --> src/db/repository/media_repository.rs:785:13
    |
785 |             container: Some("mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
   --> src/db/repository/media_repository.rs:786:13
    |
786 |             video_codec: Some("h264".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
   --> src/db/repository/media_repository.rs:787:13
    |
787 |             audio_codec: Some("aac".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
   --> src/db/repository/media_repository.rs:788:13
    |
788 |             subtitles_available: Some(vec!["en".to_string()]),
    |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
   --> src/db/repository/media_repository.rs:791:13
    |
791 |             air_date: None,
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
   --> src/db/repository/media_repository.rs:792:13
    |
792 |             studio: Some("Test Studios".to_string()),
    |             ^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
   --> src/db/repository/media_repository.rs:793:13
    |
793 |             cast: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
   --> src/db/repository/media_repository.rs:794:13
    |
794 |             crew: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:795:23
    |
795 |             added_at: Utc::now().naive_utc(),
    |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
    |
    = note: expected enum `std::option::Option<NaiveDateTime>`
             found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
    |
795 |             added_at: Some(Utc::now().naive_utc()),
    |                       +++++                      +

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:809:25
    |
809 |             sort_title: title.to_lowercase(),
    |                         ^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
809 |             sort_title: Some(title.to_lowercase()),
    |                         +++++                    +

error[E0560]: struct `media_items::Model` has no field named `original_title`
   --> src/db/repository/media_repository.rs:810:13
    |
810 |             original_title: Some(title.to_string()),
    |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
   --> src/db/repository/media_repository.rs:811:13
    |
811 |             summary: Some(format!("Summary for show {}", title)),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
   --> src/db/repository/media_repository.rs:812:13
    |
812 |             tagline: None,
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
   --> src/db/repository/media_repository.rs:814:13
    |
814 |             duration: None,
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:816:26
    |
816 |             genres: Some(vec!["Drama".to_string()]),
    |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
    |                     |
    |                     arguments to this enum variant are incorrect
    |
    = note: expected enum `JsonValue`
             found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
   --> src/db/repository/media_repository.rs:816:21
    |
816 |             genres: Some(vec!["Drama".to_string()]),
    |                     ^^^^^-------------------------^
    |                          |
    |                          this argument influences the type of `Some`
note: tuple variant defined here
   --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
    |
816 |             genres: Some(vec!["Drama".to_string()].into()),
    |                                                   +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
   --> src/db/repository/media_repository.rs:819:13
    |
819 |             media_url: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
   --> src/db/repository/media_repository.rs:820:13
    |
820 |             file_path: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
   --> src/db/repository/media_repository.rs:821:13
    |
821 |             container: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
   --> src/db/repository/media_repository.rs:822:13
    |
822 |             video_codec: None,
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
   --> src/db/repository/media_repository.rs:823:13
    |
823 |             audio_codec: None,
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
   --> src/db/repository/media_repository.rs:824:13
    |
824 |             subtitles_available: None,
    |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
   --> src/db/repository/media_repository.rs:827:13
    |
827 |             air_date: None,
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
   --> src/db/repository/media_repository.rs:828:13
    |
828 |             studio: Some("Test Network".to_string()),
    |             ^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
   --> src/db/repository/media_repository.rs:829:13
    |
829 |             cast: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
   --> src/db/repository/media_repository.rs:830:13
    |
830 |             crew: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:831:23
    |
831 |             added_at: Utc::now().naive_utc(),
    |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
    |
    = note: expected enum `std::option::Option<NaiveDateTime>`
             found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
    |
831 |             added_at: Some(Utc::now().naive_utc()),
    |                       +++++                      +

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:851:25
    |
851 |             sort_title: format!("s{:02}e{:02}", season, episode),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<std::string::String>`
    |
851 |             sort_title: format!("s{:02}e{:02}", season, episode).into(),
    |                                                                 +++++++

error[E0560]: struct `media_items::Model` has no field named `original_title`
   --> src/db/repository/media_repository.rs:852:13
    |
852 |             original_title: Some(title.to_string()),
    |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
   --> src/db/repository/media_repository.rs:853:13
    |
853 |             summary: Some(format!("Episode {} summary", title)),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
   --> src/db/repository/media_repository.rs:854:13
    |
854 |             tagline: None,
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
   --> src/db/repository/media_repository.rs:856:13
    |
856 |             duration: Some(2700000), // 45 minutes
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `media_url`
   --> src/db/repository/media_repository.rs:861:13
    |
861 |             media_url: Some(format!("https://example.com/{}.mp4", id)),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
   --> src/db/repository/media_repository.rs:862:13
    |
862 |             file_path: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
   --> src/db/repository/media_repository.rs:863:13
    |
863 |             container: Some("mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
   --> src/db/repository/media_repository.rs:864:13
    |
864 |             video_codec: Some("h264".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
   --> src/db/repository/media_repository.rs:865:13
    |
865 |             audio_codec: Some("aac".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
   --> src/db/repository/media_repository.rs:866:13
    |
866 |             subtitles_available: Some(vec!["en".to_string()]),
    |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
   --> src/db/repository/media_repository.rs:869:13
    |
869 |             air_date: Some(Utc::now().naive_utc()),
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
   --> src/db/repository/media_repository.rs:870:13
    |
870 |             studio: None,
    |             ^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
   --> src/db/repository/media_repository.rs:871:13
    |
871 |             cast: None,
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
   --> src/db/repository/media_repository.rs:872:13
    |
872 |             crew: None,
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/db/repository/media_repository.rs:873:23
    |
873 |             added_at: Utc::now().naive_utc(),
    |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
    |
    = note: expected enum `std::option::Option<NaiveDateTime>`
             found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
    |
873 |             added_at: Some(Utc::now().naive_utc()),
    |                       +++++                      +

error[E0308]: mismatched types
    --> src/db/repository/media_repository.rs:1213:36
     |
1213 |         action_movie.genres = Some(vec!["Action".to_string(), "Thriller".to_string()]);
     |                               ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                               |
     |                               arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/db/repository/media_repository.rs:1213:31
     |
1213 |         action_movie.genres = Some(vec!["Action".to_string(), "Thriller".to_string()]);
     |                               ^^^^^--------------------------------------------------^
     |                                    |
     |                                    this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1213 |         action_movie.genres = Some(vec!["Action".to_string(), "Thriller".to_string()].into());
     |                                                                                      +++++++

error[E0308]: mismatched types
    --> src/db/repository/media_repository.rs:1216:36
     |
1216 |         comedy_movie.genres = Some(vec!["Comedy".to_string()]);
     |                               ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                               |
     |                               arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/db/repository/media_repository.rs:1216:31
     |
1216 |         comedy_movie.genres = Some(vec!["Comedy".to_string()]);
     |                               ^^^^^--------------------------^
     |                                    |
     |                                    this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1216 |         comedy_movie.genres = Some(vec!["Comedy".to_string()].into());
     |                                                              +++++++

error[E0308]: mismatched types
    --> src/db/repository/media_repository.rs:1219:37
     |
1219 |         action_comedy.genres = Some(vec!["Action".to_string(), "Comedy".to_string()]);
     |                                ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                                |
     |                                arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/db/repository/media_repository.rs:1219:32
     |
1219 |         action_comedy.genres = Some(vec!["Action".to_string(), "Comedy".to_string()]);
     |                                ^^^^^------------------------------------------------^
     |                                     |
     |                                     this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1219 |         action_comedy.genres = Some(vec!["Action".to_string(), "Comedy".to_string()].into());
     |                                                                                     +++++++

error[E0560]: struct `User` has no field named `token`
   --> src/services/commands/sync_commands.rs:105:17
    |
105 |                 token: Some("token".to_string()),
    |                 ^^^^^ `User` does not have this field
    |
    = note: available fields are: `email`, `avatar_url`

error[E0560]: struct `Library` has no field named `name`
   --> src/services/commands/sync_commands.rs:113:21
    |
113 |                     name: "Movies".to_string(),
    |                     ^^^^ `Library` does not have this field
    |
    = note: available fields are: `title`, `icon`

error[E0599]: no variant or associated item named `Movie` found for enum `models::LibraryType` in the current scope
   --> src/services/commands/sync_commands.rs:114:48
    |
114 |                     library_type: LibraryType::Movie,
    |                                                ^^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Movie` not found for this enum
    |
help: there is a variant with a similar name
    |
114 |                     library_type: LibraryType::Movies,
    |                                                     +

error[E0560]: struct `Library` has no field named `name`
   --> src/services/commands/sync_commands.rs:119:21
    |
119 |                     name: "TV Shows".to_string(),
    |                     ^^^^ `Library` does not have this field
    |
    = note: available fields are: `title`, `icon`

error[E0599]: no variant or associated item named `Show` found for enum `models::LibraryType` in the current scope
   --> src/services/commands/sync_commands.rs:120:48
    |
120 |                     library_type: LibraryType::Show,
    |                                                ^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Show` not found for this enum
    |
help: there is a variant with a similar name
    |
120 |                     library_type: LibraryType::Shows,
    |                                                    +

error[E0560]: struct `Library` has no field named `name`
   --> src/services/commands/sync_commands.rs:231:13
    |
231 |             name: "Movies".to_string(),
    |             ^^^^ `Library` does not have this field
    |
    = note: available fields are: `title`, `icon`

error[E0599]: no variant or associated item named `Movie` found for enum `models::LibraryType` in the current scope
   --> src/services/commands/sync_commands.rs:232:40
    |
232 |             library_type: LibraryType::Movie,
    |                                        ^^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Movie` not found for this enum
    |
help: there is a variant with a similar name
    |
232 |             library_type: LibraryType::Movies,
    |                                             +

error[E0599]: no variant or associated item named `Movie` found for enum `models::LibraryType` in the current scope
   --> src/services/core/media.rs:642:41
    |
642 |                 "movie" => LibraryType::Movie,
    |                                         ^^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Movie` not found for this enum
    |
help: there is a variant with a similar name
    |
642 |                 "movie" => LibraryType::Movies,
    |                                              +

error[E0599]: no variant or associated item named `Show` found for enum `models::LibraryType` in the current scope
   --> src/services/core/media.rs:643:40
    |
643 |                 "show" => LibraryType::Show,
    |                                        ^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Show` not found for this enum
    |
help: there is a variant with a similar name
    |
643 |                 "show" => LibraryType::Shows,
    |                                            +

error[E0599]: no variant or associated item named `Movie` found for enum `models::LibraryType` in the current scope
   --> src/services/core/media.rs:645:35
    |
645 |                 _ => LibraryType::Movie,
    |                                   ^^^^^ variant or associated item not found in `models::LibraryType`
    |
   ::: src/models/mod.rs:33:1
    |
33  | pub enum LibraryType {
    | -------------------- variant or associated item `Movie` not found for this enum
    |
help: there is a variant with a similar name
    |
645 |                 _ => LibraryType::Movies,
    |                                        +

error[E0423]: cannot initialize a tuple struct which contains private fields
   --> src/services/core/media.rs:654:17
    |
654 |             id: MediaItemId(id.to_string()),
    |                 ^^^^^^^^^^^
    |
note: constructor is not visible here due to private fields
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(String);
    |                          ^^^^^^ private field
...
73  | impl_id_type!(MediaItemId);
    | -------------------------- in this macro invocation
    = note: this error originates in the macro `impl_id_type` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider making the field publicly accessible
   --> src/models/identifiers.rs:9:26
    |
9   |         pub struct $name(pub String);
    |                          +++

error[E0308]: mismatched types
   --> src/services/core/media.rs:899:25
    |
899 |             sort_title: "movie one".to_string(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
899 |             sort_title: Some("movie one".to_string()),
    |                         +++++                       +

error[E0560]: struct `media_items::Model` has no field named `original_title`
   --> src/services/core/media.rs:900:13
    |
900 |             original_title: Some("Movie One".to_string()),
    |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
   --> src/services/core/media.rs:901:13
    |
901 |             summary: Some("Summary 1".to_string()),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
   --> src/services/core/media.rs:902:13
    |
902 |             tagline: Some("Tagline 1".to_string()),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
   --> src/services/core/media.rs:904:13
    |
904 |             duration: Some(7200000),
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/services/core/media.rs:906:26
    |
906 |             genres: Some(vec!["Action".to_string()]),
    |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
    |                     |
    |                     arguments to this enum variant are incorrect
    |
    = note: expected enum `JsonValue`
             found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
   --> src/services/core/media.rs:906:21
    |
906 |             genres: Some(vec!["Action".to_string()]),
    |                     ^^^^^--------------------------^
    |                          |
    |                          this argument influences the type of `Some`
note: tuple variant defined here
   --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
    |
906 |             genres: Some(vec!["Action".to_string()].into()),
    |                                                    +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
   --> src/services/core/media.rs:909:13
    |
909 |             media_url: Some("https://example.com/movie1.mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
   --> src/services/core/media.rs:910:13
    |
910 |             file_path: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
   --> src/services/core/media.rs:911:13
    |
911 |             container: Some("mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
   --> src/services/core/media.rs:912:13
    |
912 |             video_codec: Some("h264".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
   --> src/services/core/media.rs:913:13
    |
913 |             audio_codec: Some("aac".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
   --> src/services/core/media.rs:914:13
    |
914 |             subtitles_available: Some(vec!["en".to_string()]),
    |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
   --> src/services/core/media.rs:917:13
    |
917 |             air_date: None,
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
   --> src/services/core/media.rs:918:13
    |
918 |             studio: Some("Studio 1".to_string()),
    |             ^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
   --> src/services/core/media.rs:919:13
    |
919 |             cast: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
   --> src/services/core/media.rs:920:13
    |
920 |             crew: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/services/core/media.rs:921:23
    |
921 |             added_at: Utc::now().naive_utc(),
    |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
    |
    = note: expected enum `std::option::Option<NaiveDateTime>`
             found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
    |
921 |             added_at: Some(Utc::now().naive_utc()),
    |                       +++++                      +

error[E0308]: mismatched types
   --> src/services/core/media.rs:933:25
    |
933 |             sort_title: "movie two".to_string(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
    |
    = note: expected enum `std::option::Option<std::string::String>`
             found struct `std::string::String`
help: try wrapping the expression in `Some`
    |
933 |             sort_title: Some("movie two".to_string()),
    |                         +++++                       +

error[E0560]: struct `media_items::Model` has no field named `original_title`
   --> src/services/core/media.rs:934:13
    |
934 |             original_title: Some("Movie Two".to_string()),
    |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
   --> src/services/core/media.rs:935:13
    |
935 |             summary: Some("Summary 2".to_string()),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
   --> src/services/core/media.rs:936:13
    |
936 |             tagline: Some("Tagline 2".to_string()),
    |             ^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
   --> src/services/core/media.rs:938:13
    |
938 |             duration: Some(6000000),
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/services/core/media.rs:940:26
    |
940 |             genres: Some(vec!["Drama".to_string()]),
    |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
    |                     |
    |                     arguments to this enum variant are incorrect
    |
    = note: expected enum `JsonValue`
             found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
   --> src/services/core/media.rs:940:21
    |
940 |             genres: Some(vec!["Drama".to_string()]),
    |                     ^^^^^-------------------------^
    |                          |
    |                          this argument influences the type of `Some`
note: tuple variant defined here
   --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
    |
940 |             genres: Some(vec!["Drama".to_string()].into()),
    |                                                   +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
   --> src/services/core/media.rs:943:13
    |
943 |             media_url: Some("https://example.com/movie2.mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
   --> src/services/core/media.rs:944:13
    |
944 |             file_path: None,
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
   --> src/services/core/media.rs:945:13
    |
945 |             container: Some("mp4".to_string()),
    |             ^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
   --> src/services/core/media.rs:946:13
    |
946 |             video_codec: Some("h264".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
   --> src/services/core/media.rs:947:13
    |
947 |             audio_codec: Some("aac".to_string()),
    |             ^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
   --> src/services/core/media.rs:948:13
    |
948 |             subtitles_available: Some(vec!["en".to_string()]),
    |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
   --> src/services/core/media.rs:951:13
    |
951 |             air_date: None,
    |             ^^^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
   --> src/services/core/media.rs:952:13
    |
952 |             studio: Some("Studio 2".to_string()),
    |             ^^^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
   --> src/services/core/media.rs:953:13
    |
953 |             cast: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
   --> src/services/core/media.rs:954:13
    |
954 |             crew: Some(serde_json::json!([])),
    |             ^^^^ `media_items::Model` does not have this field
    |
    = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
   --> src/services/core/media.rs:955:23
    |
955 |             added_at: Utc::now().naive_utc(),
    |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
    |
    = note: expected enum `std::option::Option<NaiveDateTime>`
             found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
    |
955 |             added_at: Some(Utc::now().naive_utc()),
    |                       +++++                      +

error[E0308]: arguments to this function are incorrect
   --> src/services/core/media.rs:965:21
    |
965 |         let items = MediaService::get_media_items(&db_conn, &library_id, None, None, None).await?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `u32`, found `Option<_>`
   --> src/services/core/media.rs:965:80
    |
965 |         let items = MediaService::get_media_items(&db_conn, &library_id, None, None, None).await?;
    |                                                                                ^^^^
    = note: expected type `u32`
               found enum `std::option::Option<_>`
note: expected `u32`, found `Option<_>`
   --> src/services/core/media.rs:965:86
    |
965 |         let items = MediaService::get_media_items(&db_conn, &library_id, None, None, None).await?;
    |                                                                                      ^^^^
    = note: expected type `u32`
               found enum `std::option::Option<_>`
note: associated function defined here
   --> src/services/core/media.rs:99:18
    |
99  |     pub async fn get_media_items(
    |                  ^^^^^^^^^^^^^^^
...
103 |         offset: u32,
    |         -----------
104 |         limit: u32,
    |         ----------

error[E0615]: attempted to take value of method `title` on type `&MediaItem`
   --> src/services/core/media.rs:967:40
    |
967 |         assert!(items.iter().any(|i| i.title == "Movie One"));
    |                                        ^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
967 |         assert!(items.iter().any(|i| i.title() == "Movie One"));
    |                                             ++

error[E0615]: attempted to take value of method `title` on type `&MediaItem`
   --> src/services/core/media.rs:968:40
    |
968 |         assert!(items.iter().any(|i| i.title == "Movie Two"));
    |                                        ^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
968 |         assert!(items.iter().any(|i| i.title() == "Movie Two"));
    |                                             ++

error[E0308]: mismatched types
   --> src/services/core/media.rs:974:18
    |
974 |             Some(&MediaType::Movie),
    |             ---- ^^^^^^^^^^^^^^^^^ expected `MediaType`, found `&MediaType`
    |             |
    |             arguments to this enum variant are incorrect
    |
help: the type constructed contains `&models::MediaType` due to the type of the argument passed
   --> src/services/core/media.rs:974:13
    |
974 |             Some(&MediaType::Movie),
    |             ^^^^^-----------------^
    |                  |
    |                  this argument influences the type of `Some`
note: tuple variant defined here
   --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^
help: consider removing the borrow
    |
974 -             Some(&MediaType::Movie),
974 +             Some(MediaType::Movie),
    |

error[E0308]: arguments to this function are incorrect
   --> src/services/core/media.rs:971:21
    |
971 |         let items = MediaService::get_media_items(
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `u32`, found `Option<_>`
   --> src/services/core/media.rs:975:13
    |
975 |             None,
    |             ^^^^
    = note: expected type `u32`
               found enum `std::option::Option<_>`
note: expected `u32`, found `Option<_>`
   --> src/services/core/media.rs:976:13
    |
976 |             None,
    |             ^^^^
    = note: expected type `u32`
               found enum `std::option::Option<_>`
note: associated function defined here
   --> src/services/core/media.rs:99:18
    |
99  |     pub async fn get_media_items(
    |                  ^^^^^^^^^^^^^^^
...
103 |         offset: u32,
    |         -----------
104 |         limit: u32,
    |         ----------

error[E0308]: arguments to this function are incorrect
   --> src/services/core/media.rs:983:13
    |
983 |             MediaService::get_media_items(&db_conn, &library_id, None, Some(1), Some(0)).await?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: expected `u32`, found `Option<{integer}>`
   --> src/services/core/media.rs:983:72
    |
983 |             MediaService::get_media_items(&db_conn, &library_id, None, Some(1), Some(0)).await?;
    |                                                                        ^^^^^^^
    = note: expected type `u32`
               found enum `std::option::Option<{integer}>`
note: expected `u32`, found `Option<{integer}>`
   --> src/services/core/media.rs:983:81
    |
983 |             MediaService::get_media_items(&db_conn, &library_id, None, Some(1), Some(0)).await?;
    |                                                                                 ^^^^^^^
    = note: expected type `u32`
               found enum `std::option::Option<{integer}>`
note: associated function defined here
   --> src/services/core/media.rs:99:18
    |
99  |     pub async fn get_media_items(
    |                  ^^^^^^^^^^^^^^^
...
103 |         offset: u32,
    |         -----------
104 |         limit: u32,
    |         ----------

error[E0308]: mismatched types
    --> src/services/core/media.rs:1017:25
     |
1017 |             sort_title: "matrix".to_string(),
     |                         ^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
     |
     = note: expected enum `std::option::Option<std::string::String>`
              found struct `std::string::String`
help: try wrapping the expression in `Some`
     |
1017 |             sort_title: Some("matrix".to_string()),
     |                         +++++                    +

error[E0560]: struct `media_items::Model` has no field named `original_title`
    --> src/services/core/media.rs:1018:13
     |
1018 |             original_title: Some("The Matrix".to_string()),
     |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
    --> src/services/core/media.rs:1019:13
     |
1019 |             summary: Some("A computer hacker learns about the true nature of reality".to_string()),
     |             ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
    --> src/services/core/media.rs:1020:13
     |
1020 |             tagline: Some("Welcome to the Real World".to_string()),
     |             ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
    --> src/services/core/media.rs:1022:13
     |
1022 |             duration: Some(8160000),
     |             ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1024:26
     |
1024 |             genres: Some(vec!["Sci-Fi".to_string(), "Action".to_string()]),
     |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                     |
     |                     arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/services/core/media.rs:1024:21
     |
1024 |             genres: Some(vec!["Sci-Fi".to_string(), "Action".to_string()]),
     |                     ^^^^^------------------------------------------------^
     |                          |
     |                          this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1024 |             genres: Some(vec!["Sci-Fi".to_string(), "Action".to_string()].into()),
     |                                                                          +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
    --> src/services/core/media.rs:1027:13
     |
1027 |             media_url: Some("https://example.com/matrix.mp4".to_string()),
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
    --> src/services/core/media.rs:1028:13
     |
1028 |             file_path: None,
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
    --> src/services/core/media.rs:1029:13
     |
1029 |             container: Some("mp4".to_string()),
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
    --> src/services/core/media.rs:1030:13
     |
1030 |             video_codec: Some("h264".to_string()),
     |             ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
    --> src/services/core/media.rs:1031:13
     |
1031 |             audio_codec: Some("aac".to_string()),
     |             ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
    --> src/services/core/media.rs:1032:13
     |
1032 |             subtitles_available: Some(vec!["en".to_string()]),
     |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
    --> src/services/core/media.rs:1035:13
     |
1035 |             air_date: None,
     |             ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
    --> src/services/core/media.rs:1036:13
     |
1036 |             studio: Some("Warner Bros".to_string()),
     |             ^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
    --> src/services/core/media.rs:1037:13
     |
1037 |             cast: Some(serde_json::json!([])),
     |             ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
    --> src/services/core/media.rs:1038:13
     |
1038 |             crew: Some(serde_json::json!([])),
     |             ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1039:23
     |
1039 |             added_at: Utc::now().naive_utc(),
     |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
     |
     = note: expected enum `std::option::Option<NaiveDateTime>`
              found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
     |
1039 |             added_at: Some(Utc::now().naive_utc()),
     |                       +++++                      +

error[E0308]: mismatched types
    --> src/services/core/media.rs:1051:25
     |
1051 |             sort_title: "inception".to_string(),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
     |
     = note: expected enum `std::option::Option<std::string::String>`
              found struct `std::string::String`
help: try wrapping the expression in `Some`
     |
1051 |             sort_title: Some("inception".to_string()),
     |                         +++++                       +

error[E0560]: struct `media_items::Model` has no field named `original_title`
    --> src/services/core/media.rs:1052:13
     |
1052 |             original_title: Some("Inception".to_string()),
     |             ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
    --> src/services/core/media.rs:1053:13
     |
1053 |             summary: Some(
     |             ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
    --> src/services/core/media.rs:1056:13
     |
1056 |             tagline: Some("Your mind is the scene of the crime".to_string()),
     |             ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
    --> src/services/core/media.rs:1058:13
     |
1058 |             duration: Some(8880000),
     |             ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1060:26
     |
1060 |             genres: Some(vec!["Sci-Fi".to_string(), "Thriller".to_string()]),
     |                     ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                     |
     |                     arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/services/core/media.rs:1060:21
     |
1060 |             genres: Some(vec!["Sci-Fi".to_string(), "Thriller".to_string()]),
     |                     ^^^^^--------------------------------------------------^
     |                          |
     |                          this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1060 |             genres: Some(vec!["Sci-Fi".to_string(), "Thriller".to_string()].into()),
     |                                                                            +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
    --> src/services/core/media.rs:1063:13
     |
1063 |             media_url: Some("https://example.com/inception.mp4".to_string()),
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
    --> src/services/core/media.rs:1064:13
     |
1064 |             file_path: None,
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
    --> src/services/core/media.rs:1065:13
     |
1065 |             container: Some("mp4".to_string()),
     |             ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
    --> src/services/core/media.rs:1066:13
     |
1066 |             video_codec: Some("h264".to_string()),
     |             ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
    --> src/services/core/media.rs:1067:13
     |
1067 |             audio_codec: Some("aac".to_string()),
     |             ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
    --> src/services/core/media.rs:1068:13
     |
1068 |             subtitles_available: Some(vec!["en".to_string()]),
     |             ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
    --> src/services/core/media.rs:1071:13
     |
1071 |             air_date: None,
     |             ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
    --> src/services/core/media.rs:1072:13
     |
1072 |             studio: Some("Warner Bros".to_string()),
     |             ^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
    --> src/services/core/media.rs:1073:13
     |
1073 |             cast: Some(serde_json::json!([])),
     |             ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
    --> src/services/core/media.rs:1074:13
     |
1074 |             crew: Some(serde_json::json!([])),
     |             ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1075:23
     |
1075 |             added_at: Utc::now().naive_utc(),
     |                       ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
     |
     = note: expected enum `std::option::Option<NaiveDateTime>`
              found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
     |
1075 |             added_at: Some(Utc::now().naive_utc()),
     |                       +++++                      +

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
    --> src/services/core/media.rs:1084:23
     |
1084 |         let results = MediaService::search_media(&db_conn, "matrix").await?;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------- two arguments of type `std::option::Option<&identifiers::LibraryId>` and `std::option::Option<models::MediaType>` are missing
     |
note: associated function defined here
    --> src/services/core/media.rs:356:18
     |
356  |     pub async fn search_media(
     |                  ^^^^^^^^^^^^
...
359  |         library_id: Option<&LibraryId>,
     |         ------------------------------
360  |         media_type: Option<MediaType>,
     |         -----------------------------
help: provide the arguments
     |
1084 |         let results = MediaService::search_media(&db_conn, "matrix", /* std::option::Option<&identifiers::LibraryId> */, /* std::option::Option<models::MediaType> */).await?;
     |                                                                    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1086:31
     |
1086 |         assert_eq!(results[0].title, "The Matrix");
     |                               ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1086 |         assert_eq!(results[0].title(), "The Matrix");
     |                                    ++

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
    --> src/services/core/media.rs:1088:23
     |
1088 |         let results = MediaService::search_media(&db_conn, "inception").await?;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------- two arguments of type `std::option::Option<&identifiers::LibraryId>` and `std::option::Option<models::MediaType>` are missing
     |
note: associated function defined here
    --> src/services/core/media.rs:356:18
     |
356  |     pub async fn search_media(
     |                  ^^^^^^^^^^^^
...
359  |         library_id: Option<&LibraryId>,
     |         ------------------------------
360  |         media_type: Option<MediaType>,
     |         -----------------------------
help: provide the arguments
     |
1088 |         let results = MediaService::search_media(&db_conn, "inception", /* std::option::Option<&identifiers::LibraryId> */, /* std::option::Option<models::MediaType> */).await?;
     |                                                                       ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1090:31
     |
1090 |         assert_eq!(results[0].title, "Inception");
     |                               ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1090 |         assert_eq!(results[0].title(), "Inception");
     |                                    ++

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
    --> src/services/core/media.rs:1093:23
     |
1093 |         let results = MediaService::search_media(&db_conn, "cep").await?;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^----------------- two arguments of type `std::option::Option<&identifiers::LibraryId>` and `std::option::Option<models::MediaType>` are missing
     |
note: associated function defined here
    --> src/services/core/media.rs:356:18
     |
356  |     pub async fn search_media(
     |                  ^^^^^^^^^^^^
...
359  |         library_id: Option<&LibraryId>,
     |         ------------------------------
360  |         media_type: Option<MediaType>,
     |         -----------------------------
help: provide the arguments
     |
1093 |         let results = MediaService::search_media(&db_conn, "cep", /* std::option::Option<&identifiers::LibraryId> */, /* std::option::Option<models::MediaType> */).await?;
     |                                                                 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1095:31
     |
1095 |         assert_eq!(results[0].title, "Inception");
     |                               ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1095 |         assert_eq!(results[0].title(), "Inception");
     |                                    ++

error[E0308]: mismatched types
    --> src/services/core/media.rs:1130:29
     |
1130 |                 sort_title: format!("movie {}", i),
     |                             ^^^^^^^^^^^^^^^^^^^^^^ expected `Option<String>`, found `String`
     |
     = note: expected enum `std::option::Option<std::string::String>`
              found struct `std::string::String`
note: return type inferred to be `std::option::Option<std::string::String>` here
    --> src/services/core/media.rs:1102:18
     |
1102 |         let db = setup_test_database().await?;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: call `Into::into` on this expression to convert `std::string::String` into `std::option::Option<std::string::String>`
     |
1130 |                 sort_title: format!("movie {}", i).into(),
     |                                                   +++++++

error[E0560]: struct `media_items::Model` has no field named `original_title`
    --> src/services/core/media.rs:1131:17
     |
1131 |                 original_title: Some(format!("Movie {}", i)),
     |                 ^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `summary`
    --> src/services/core/media.rs:1132:17
     |
1132 |                 summary: Some(format!("Summary {}", i)),
     |                 ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `tagline`
    --> src/services/core/media.rs:1133:17
     |
1133 |                 tagline: None,
     |                 ^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `duration`
    --> src/services/core/media.rs:1135:17
     |
1135 |                 duration: Some(7200000),
     |                 ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1137:30
     |
1137 |                 genres: Some(vec!["Action".to_string()]),
     |                         ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Vec<String>`
     |                         |
     |                         arguments to this enum variant are incorrect
     |
     = note: expected enum `JsonValue`
              found struct `std::vec::Vec<std::string::String>`
help: the type constructed contains `std::vec::Vec<std::string::String>` due to the type of the argument passed
    --> src/services/core/media.rs:1137:25
     |
1137 |                 genres: Some(vec!["Action".to_string()]),
     |                         ^^^^^--------------------------^
     |                              |
     |                              this argument influences the type of `Some`
note: tuple variant defined here
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:599:5
     |
599  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^
help: call `Into::into` on this expression to convert `std::vec::Vec<std::string::String>` into `JsonValue`
     |
1137 |                 genres: Some(vec!["Action".to_string()].into()),
     |                                                        +++++++

error[E0560]: struct `media_items::Model` has no field named `media_url`
    --> src/services/core/media.rs:1140:17
     |
1140 |                 media_url: None,
     |                 ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `file_path`
    --> src/services/core/media.rs:1141:17
     |
1141 |                 file_path: None,
     |                 ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `container`
    --> src/services/core/media.rs:1142:17
     |
1142 |                 container: None,
     |                 ^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `video_codec`
    --> src/services/core/media.rs:1143:17
     |
1143 |                 video_codec: None,
     |                 ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `audio_codec`
    --> src/services/core/media.rs:1144:17
     |
1144 |                 audio_codec: None,
     |                 ^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `subtitles_available`
    --> src/services/core/media.rs:1145:17
     |
1145 |                 subtitles_available: None,
     |                 ^^^^^^^^^^^^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `air_date`
    --> src/services/core/media.rs:1148:17
     |
1148 |                 air_date: None,
     |                 ^^^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `studio`
    --> src/services/core/media.rs:1149:17
     |
1149 |                 studio: None,
     |                 ^^^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `cast`
    --> src/services/core/media.rs:1150:17
     |
1150 |                 cast: None,
     |                 ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0560]: struct `media_items::Model` has no field named `crew`
    --> src/services/core/media.rs:1151:17
     |
1151 |                 crew: None,
     |                 ^^^^ `media_items::Model` does not have this field
     |
     = note: available fields are: `duration_ms`, `overview`

error[E0308]: mismatched types
    --> src/services/core/media.rs:1152:27
     |
1152 |                 added_at: Utc::now().naive_utc() - chrono::Duration::hours(i as i64),
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<NaiveDateTime>`, found `NaiveDateTime`
     |
     = note: expected enum `std::option::Option<NaiveDateTime>`
              found struct `NaiveDateTime`
help: try wrapping the expression in `Some`
     |
1152 |                 added_at: Some(Utc::now().naive_utc() - chrono::Duration::hours(i as i64)),
     |                           +++++                                                          +

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1166:30
     |
1166 |         assert_eq!(recent[0].title, "Movie 0");
     |                              ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1166 |         assert_eq!(recent[0].title(), "Movie 0");
     |                                   ++

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1167:30
     |
1167 |         assert_eq!(recent[1].title, "Movie 1");
     |                              ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1167 |         assert_eq!(recent[1].title(), "Movie 1");
     |                                   ++

error[E0615]: attempted to take value of method `title` on type `MediaItem`
    --> src/services/core/media.rs:1168:30
     |
1168 |         assert_eq!(recent[2].title, "Movie 2");
     |                              ^^^^^ method, not a field
     |
help: use parentheses to call the method
     |
1168 |         assert_eq!(recent[2].title(), "Movie 2");
     |                                   ++

warning: unused import: `EntityTrait`
   --> src/db/repository/media_repository.rs:691:57
    |
691 |     use sea_orm::{ActiveModelTrait, DatabaseConnection, EntityTrait, Set};
    |                                                         ^^^^^^^^^^^

warning: unused import: `EntityTrait`
   --> src/services/core/media.rs:595:37
    |
595 |     use sea_orm::{ActiveModelTrait, EntityTrait, Set};
    |                                     ^^^^^^^^^^^

error[E0382]: use of moved value: `next`
    --> src/db/repository/media_repository.rs:1165:20
     |
1162 |         let next = repo.find_next_episode("show-1", 1, 3).await?;
     |             ---- move occurs because `next` has type `std::option::Option<media_items::Model>`, which does not implement the `Copy` trait
1163 |         assert!(next.is_some());
1164 |         assert_eq!(next.unwrap().season_number, Some(2));
     |                    ---- -------- `next` moved due to this method call
     |                    |
     |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
1165 |         assert_eq!(next.unwrap().episode_number, Some(1));
     |                    ^^^^ value used here after move
     |
note: `std::option::Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `next`
    --> /nix/store/gdn21mhnc98vra19ha1sifsxncvpbgcg-rust-default-1.89.0/lib/rustlib/src/rust/library/core/src/option.rs:1002:25
     |
1002 |     pub const fn unwrap(self) -> T {
     |                         ^^^^
help: you can `clone` the value and consume it, but this might not be your desired behavior
     |
1164 |         assert_eq!(next.clone().unwrap().season_number, Some(2));
     |                        ++++++++

error[E0382]: use of moved value: `prev`
    --> src/db/repository/media_repository.rs:1176:20
     |
1173 |         let prev = repo.find_previous_episode("show-1", 2, 1).await?;
     |             ---- move occurs because `prev` has type `std::option::Option<media_items::Model>`, which does not implement the `Copy` trait
1174 |         assert!(prev.is_some());
1175 |         assert_eq!(prev.unwrap().season_number, Some(1));
     |                    ---- -------- `prev` moved due to this method call
     |                    |
     |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
1176 |         assert_eq!(prev.unwrap().episode_number, Some(3));
     |                    ^^^^ value used here after move
     |
help: you can `clone` the value and consume it, but this might not be your desired behavior
     |
1175 |         assert_eq!(prev.clone().unwrap().season_number, Some(1));
     |                        ++++++++

Some errors have detailed explanations: E0046, E0050, E0053, E0061, E0277, E0308, E0382, E0407, E0412...
For more information about an error, try `rustc --explain E0046`.
warning: `reel` (bin "reel" test) generated 28 warnings
error: could not compile `reel` (bin "reel" test) due to 193 previous errors; 28 warnings emitted
