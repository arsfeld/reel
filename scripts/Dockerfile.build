# Shared Dockerfile for building Reel with cargo-chef for optimized caching
# Designed for use with Docker buildx for multi-arch builds (x86_64 and arm64)

# Stage 1: Base image with all dependencies pre-installed
# Note: Using Ubuntu base image for GTK4 4.14+ support
FROM ubuntu:24.04 AS base

ENV DEBIAN_FRONTEND=noninteractive
ARG RUST_VERSION=1.89.0

# Install all dependencies once
RUN apt-get update && apt-get install -y \
    # Core build tools
    build-essential \
    clang \
    mold \
    pkg-config \
    curl \
    wget \
    ca-certificates \
    git \
    file \
    # SSL/TLS development
    libssl-dev \
    # GTK4 and UI dependencies
    libgtk-4-dev \
    libadwaita-1-dev \
    libepoxy-dev \
    # GStreamer and media
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    libmpv-dev \
    # Database and networking
    libsqlite3-dev \
    libdbus-1-dev \
    # Build tools
    blueprint-compiler \
    desktop-file-utils \
    # Package building tools
    dpkg-dev \
    rpm \
    # AppImage dependencies
    libfuse2 \
    zsync \
    patchelf \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_VERSION
ENV PATH="/root/.cargo/bin:${PATH}"

# Install cargo-chef for optimized Docker builds
RUN cargo install cargo-chef --locked

# Install cargo packaging tools
RUN cargo install cargo-deb --locked && \
    cargo install cargo-generate-rpm --locked

WORKDIR /workspace

# Stage 2: Planner - generates recipe.json for dependency caching
FROM base AS planner
COPY Cargo.toml Cargo.lock ./
COPY src ./src
RUN cargo chef prepare --recipe-path recipe.json

# Stage 3: Cacher - builds dependencies only
FROM base AS cacher
COPY --from=planner /workspace/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Stage 4: Builder - builds the actual application
FROM cacher AS builder

# Copy only the source files needed for the build
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY build.rs ./
COPY data ./data
COPY assets ./assets
COPY LICENSE ./
COPY README.md ./
COPY scripts ./scripts

# Build the application (dependencies are already built)
RUN cargo build --release && \
    strip target/release/reel

# Default command for building packages
CMD ["/bin/bash"]
