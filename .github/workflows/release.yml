name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v0.1.0, v0.1.0-beta1, v0.1.0-alpha1)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if prerelease
        id: check_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          # Auto-detect prerelease based on tag pattern or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Manual prerelease flag set"
          elif [[ "$VERSION" =~ -(alpha|beta|rc|dev|pre) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Auto-detected prerelease from version: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Stable release: $VERSION"
          fi

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ steps.get_version.outputs.version }} &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release already exists for ${{ steps.get_version.outputs.version }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No release found for ${{ steps.get_version.outputs.version }}"
          fi
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true

      - name: Generate release notes
        id: generate_notes
        if: steps.check_release.outputs.exists == 'false'
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_version.outputs.version }}^ 2>/dev/null || echo "")

          # Get commit messages between tags
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..${{ steps.get_version.outputs.version }})
          else
            COMMITS=$(git log --pretty=format:"- %s" --max-count=20)
          fi

          # Save to output (escape newlines for GitHub Actions)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Build release body
        id: build_body
        if: steps.check_release.outputs.exists == 'false'
        run: |
          cat > release_body.md << 'RELEASE_BODY'
          ${{ steps.check_prerelease.outputs.is_prerelease == 'true' && '
          > ⚠️ **This is a prerelease version** - It may contain bugs and is intended for testing purposes. Use stable releases for production.
          ' || '' }}
          ## Changes
          ${{ steps.generate_notes.outputs.notes || '- Initial release' }}

          ## Downloads

          ### x86_64 (Intel/AMD)
          # - **AppImage**: `reel-${{ steps.get_version.outputs.version }}-x86_64.AppImage` - Portable, runs on most Linux distributions (recommended)
          - **Debian/Ubuntu**: `reel-${{ steps.get_version.outputs.version }}-amd64.deb` - Install with `sudo dpkg -i`
          - **Fedora/RHEL**: `reel-${{ steps.get_version.outputs.version }}-x86_64.rpm` - Install with `sudo rpm -i`
          - **Linux Tarball**: `reel-linux-x86_64.tar.gz` - Extract and run `./reel`

          ### ARM64 (aarch64)
          # - **AppImage**: `reel-${{ steps.get_version.outputs.version }}-aarch64.AppImage` - Portable, runs on ARM64 Linux distributions
          - **Debian/Ubuntu**: `reel-${{ steps.get_version.outputs.version }}-arm64.deb` - Install with `sudo dpkg -i`
          - **Fedora/RHEL**: `reel-${{ steps.get_version.outputs.version }}-aarch64.rpm` - Install with `sudo rpm -i`
          - **Linux Tarball**: `reel-linux-aarch64.tar.gz` - Extract and run `./reel`

          ## Installation

          # ### AppImage (Recommended)
          # ```bash
          # chmod +x reel-${{ steps.get_version.outputs.version }}-x86_64.AppImage
          # ./reel-${{ steps.get_version.outputs.version }}-x86_64.AppImage
          # ```

          ### Debian/Ubuntu
          ```bash
          sudo dpkg -i reel-${{ steps.get_version.outputs.version }}-amd64.deb
          sudo apt-get install -f  # Install dependencies if needed
          ```

          ### Fedora/RHEL/openSUSE
          ```bash
          sudo rpm -i reel-${{ steps.get_version.outputs.version }}-x86_64.rpm
          # or
          sudo dnf install ./reel-${{ steps.get_version.outputs.version }}-x86_64.rpm
          ```

          ### Manual Installation
          ```bash
          tar -xzf reel-linux-x86_64.tar.gz
          chmod +x reel
          ./reel
          ```

          ## System Requirements
          - GTK4 and libadwaita
          - GStreamer with common plugins
          - 64-bit operating system
          RELEASE_BODY

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Reel ${{ steps.get_version.outputs.version }}${{ steps.check_prerelease.outputs.is_prerelease == 'true' && ' (Prerelease)' || '' }}
          draft: true
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease == 'true' }}
          body_path: ${{ steps.check_release.outputs.exists == 'false' && 'release_body.md' || '' }}

  build-linux:
    needs: create-release
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
          - arch: aarch64
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for cross-compilation
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker buildx cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.arch }}-
            ${{ runner.os }}-buildx-

      - name: Build packages with Docker
        run: |
          # Set cache environment variables for the build script
          export BUILDX_CACHE_FROM="type=local,src=/tmp/.buildx-cache"
          export BUILDX_CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"

          # Use the Docker build script to build all packages (excluding AppImage)
          ./scripts/build-with-docker.sh ${{ matrix.arch }} deb rpm tarball

          # Move cache to correct location (atomic)
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: List built artifacts
        run: |
          echo "Built artifacts:"
          ls -la reel-* || true

      - name: Upload Linux Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            reel-linux-*.tar.gz
            reel-linux-*
            reel-*.deb
            reel-*.rpm
            # reel-*.AppImage

  # Flatpak builds are disabled temporarily for better testing
  # build-flatpak:
  #   needs: create-release
  #   strategy:
  #     matrix:
  #       include:
  #         - arch: x86_64
  #           runner: ubuntu-latest
  #         - arch: aarch64
  #           runner: ubuntu-latest
  #   runs-on: ${{ matrix.runner }}
  #   permissions:
  #     contents: write
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Set up QEMU for cross-compilation
  #       if: matrix.arch == 'aarch64'
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64
  #
  #     - name: Install cross-compilation dependencies for ARM64
  #       if: matrix.arch == 'aarch64'
  #       run: |
  #         # Enable ARM64 architecture
  #         sudo dpkg --add-architecture arm64
  #
  #         # Remove the default Ubuntu sources that don't support ARM64
  #         sudo rm -f /etc/apt/sources.list.d/ubuntu.sources
  #
  #         # Create proper deb822 format sources for both amd64 and arm64
  #         cat <<EOF | sudo tee /etc/apt/sources.list.d/amd64.sources
  #         Types: deb
  #         URIs: http://azure.archive.ubuntu.com/ubuntu/
  #         Suites: noble noble-updates noble-backports
  #         Components: main restricted universe multiverse
  #         Architectures: amd64
  #
  #         Types: deb
  #         URIs: http://security.ubuntu.com/ubuntu/
  #         Suites: noble-security
  #         Components: main restricted universe multiverse
  #         Architectures: amd64
  #         EOF
  #
  #         cat <<EOF | sudo tee /etc/apt/sources.list.d/arm64.sources
  #         Types: deb
  #         URIs: http://ports.ubuntu.com/ubuntu-ports/
  #         Suites: noble noble-updates noble-backports noble-security
  #         Components: main restricted universe multiverse
  #         Architectures: arm64
  #         EOF
  #
  #         sudo apt-get update
  #
  #         # Install cross-compilation tools
  #         sudo apt-get install -y \
  #           gcc-aarch64-linux-gnu \
  #           g++-aarch64-linux-gnu \
  #           pkg-config \
  #           libssl-dev:arm64
  #
  #     - name: Install Flatpak and dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y flatpak flatpak-builder
  #         sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  #         sudo flatpak install -y flathub org.gnome.Platform//48 org.gnome.Sdk//48 org.freedesktop.Sdk.Extension.rust-stable//23.08
  #
  #     - name: Setup uv for Python dependency management
  #       run: |
  #         # Install uv
  #         curl -LsSf https://astral.sh/uv/install.sh | sh
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH
  #
  #     - name: Build Flatpak
  #       run: |
  #         # Set version and architecture environment variables for the build script
  #         export VERSION=${{ needs.create-release.outputs.version }}
  #         export ARCH=${{ matrix.arch }}
  #
  #         # Set cross-compilation environment for ARM64
  #         if [ "${{ matrix.arch }}" = "aarch64" ]; then
  #           export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
  #           export PKG_CONFIG_ALLOW_CROSS=1
  #           export OPENSSL_DIR=/usr
  #           export OPENSSL_INCLUDE_DIR=/usr/include
  #           export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
  #         fi
  #
  #         # Use our standalone Flatpak build script
  #         ./scripts/build-flatpak.sh
  #
  #     - name: Package repository for distribution
  #       run: |
  #         # Create a tarball of the repository for hosting
  #         tar -czf repo.tar.gz -C repo .
  #
  #     - name: Upload Flatpak Release Assets
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.create-release.outputs.version }}
  #         files: |
  #           reel-*.flatpak
  #           repo.tar.gz

  # macOS and Windows builds are disabled for now - we only test on Linux
  # Uncomment the sections below to enable multi-platform builds

  # build-macos:
  #   needs: create-release
  #   runs-on: macos-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Install dependencies
  #       run: |
  #         brew install gtk4 libadwaita gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav pkg-config blueprint-compiler create-dmg
  #
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #
  #     - name: Cache cargo dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-cargo-release-
  #
  #     - name: Build release binary
  #       run: |
  #         cargo build --release
  #         strip target/release/reel
  #
  #     - name: Create macOS app bundle
  #       run: |
  #         mkdir -p Reel.app/Contents/MacOS
  #         mkdir -p Reel.app/Contents/Resources
  #         cp target/release/reel Reel.app/Contents/MacOS/reel
  #
  #         # Create Info.plist
  #         cat > Reel.app/Contents/Info.plist << EOF
  #         <?xml version="1.0" encoding="UTF-8"?>
  #         <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  #         <plist version="1.0">
  #         <dict>
  #             <key>CFBundleExecutable</key>
  #             <string>reel</string>
  #             <key>CFBundleIdentifier</key>
  #             <string>org.gnome.Reel</string>
  #             <key>CFBundleName</key>
  #             <string>Reel</string>
  #             <key>CFBundleDisplayName</key>
  #             <string>Reel Media Player</string>
  #             <key>CFBundlePackageType</key>
  #             <string>APPL</string>
  #             <key>CFBundleShortVersionString</key>
  #             <string>${{ needs.create-release.outputs.version }}</string>
  #             <key>CFBundleVersion</key>
  #             <string>1</string>
  #             <key>LSMinimumSystemVersion</key>
  #             <string>10.15</string>
  #             <key>NSHighResolutionCapable</key>
  #             <true/>
  #             <key>NSSupportsAutomaticGraphicsSwitching</key>
  #             <true/>
  #         </dict>
  #         </plist>
  #         EOF
  #
  #     - name: Create DMG
  #       run: |
  #         create-dmg \
  #           --volname "Reel Media Player" \
  #           --window-pos 200 120 \
  #           --window-size 600 400 \
  #           --icon-size 100 \
  #           --icon "Reel.app" 175 190 \
  #           --hide-extension "Reel.app" \
  #           --app-drop-link 425 190 \
  #           "reel-macos-universal.dmg" \
  #           "Reel.app"
  #
  #     - name: Upload macOS Release Asset
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.create-release.outputs.version }}
  #         files: reel-macos-universal.dmg

  # build-windows:
  #   needs: create-release
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: x86_64-pc-windows-gnu
  #
  #     - uses: msys2/setup-msys2@v2
  #       with:
  #         msystem: MINGW64
  #         update: true
  #         install: >-
  #           mingw-w64-x86_64-gtk4
  #           mingw-w64-x86_64-libadwaita
  #           mingw-w64-x86_64-gstreamer
  #           mingw-w64-x86_64-gst-plugins-base
  #           mingw-w64-x86_64-gst-plugins-good
  #           mingw-w64-x86_64-gst-plugins-bad
  #           mingw-w64-x86_64-gst-plugins-ugly
  #           mingw-w64-x86_64-gst-libav
  #           mingw-w64-x86_64-pkg-config
  #           mingw-w64-x86_64-gcc
  #           mingw-w64-x86_64-blueprint-compiler
  #           base-devel
  #           zip
  #
  #     - name: Cache cargo dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-cargo-release-
  #
  #     - name: Build release binary
  #       shell: msys2 {0}
  #       run: |
  #         export PATH="/c/Users/runneradmin/.cargo/bin:$PATH"
  #         export PKG_CONFIG_PATH="/mingw64/lib/pkgconfig:$PKG_CONFIG_PATH"
  #         cargo build --release
  #         strip target/release/reel.exe
  #
  #     - name: Package Windows executable
  #       shell: msys2 {0}
  #       run: |
  #         mkdir -p dist/Reel
  #         cp target/release/reel.exe dist/Reel/reel.exe
  #
  #         # Copy required DLLs
  #         ldd target/release/reel.exe | grep mingw64 | awk '{print $3}' | xargs -I {} cp {} dist/Reel/
  #
  #         # Create README
  #         cat > dist/Reel/README.txt << EOF
  #         Reel Media Player for Windows
  #         ==============================
  #
  #         To run Reel, simply double-click reel.exe
  #
  #         If you encounter any issues with missing DLLs, please ensure you have:
  #         - Visual C++ Redistributables installed
  #         - GTK4 runtime (included in this package)
  #
  #         For support, visit: https://github.com/yourusername/reel
  #         EOF
  #
  #         # Create zip archive
  #         cd dist && zip -r ../reel-windows-x86_64.zip Reel && cd ..
  #
  #     - name: Upload Windows Release Asset
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.create-release.outputs.version }}
  #         files: reel-windows-x86_64.zip
